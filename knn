#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
import math
import operator


# In[2]:


data = pd.read_csv('iris.csv')


# In[3]:


data.head()


# In[4]:


names = ['Sepal_Length','Sepal_Width','Petal_Length','Petal_Width','Class']


# In[5]:


def euclideanDistance(data1, data2, length):
  distance = 0
  for x in range(length):
    distance += np.square(data1[x] - data2[x])
    return np.sqrt(distance)


# In[21]:


def knn(trainingSet, testInstance, k):
  distances = {}
  sort = {}
  length = testInstance.shape[1]

  for x in range(len(trainingSet)):

    dist = euclideanDistance(testInstance, trainingSet.iloc[x], length)
    distances[x] = dist[0]

    sorted_d = sorted(distances.items(), key=operator.itemgetter(1))

    neighbors = []

  for x in range(k):
    neighbors.append(sorted_d[x][0])

    classVotes = {}

  for x in range(len(neighbors)):
    response = trainingSet.iloc[neighbors[x]][-1]
    if response in classVotes:
      classVotes[response] += 1
    else:
      classVotes[response] = 1

    sortedVotes = sorted(classVotes.items(), key=operator.itemgetter(1))
    return(sortedVotes[0][0], neighbors)


    
    

        
        
        
        
        
        
        
        
        
        


# In[22]:


testSet = [[7.2, 3.6, 5.1, 2.5]]
test = pd.DataFrame(testSet)


# In[23]:


k = 1
result,neigh = knn(data, test, k)
print(result)
print('\n')

print(neigh)
print('\n')


# In[24]:


k = 3
result,neigh = knn(data, test, k)
print(result)
print('\n')

print(neigh)
print('\n')


# In[25]:


k = 5
result,neigh = knn(data, test, k)
print(result)
print('\n')

print(neigh)
print('\n')


# In[ ]:




